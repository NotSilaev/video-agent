import sys
sys.path.append('../../../') # src/

from config import settings
from logs import addLog
from cache import setCacheValue, getCacheValue, deleteCacheKey

from bot.exceptions import exceptions_catcher
from bot.utils import respondEvent

from orders import makeOrderStructure, processOrder

from aiogram import Bot, Router, F
from aiogram.types import (
    Message,
    CallbackQuery,
    ContentType,
    LabeledPrice,
    PreCheckoutQuery
)
from aiogram.filters import Command, StateFilter
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

from pathlib import Path
import datetime
import traceback
import json
import uuid


router = Router(name=__name__)


class Order(StatesGroup):
    topic = State()
    style = State()
    count = State()
    platforms = State()
    periodicity = State()
    watermark = State()
    publication_method = State()
    publication_account = State()
    price = State()


@router.callback_query(F.data == 'select_video_topic')
@exceptions_catcher()
async def select_video_topic(call: CallbackQuery, state: FSMContext) -> None:
    message_text = (
        '*üé• –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞*\n\n'
        'üöÄ –£–∫–∞–∂–∏—Ç–µ —Ç–µ–º–∞—Ç–∏–∫—É –≤–∏–¥–µ–æ.\n\n'
        'üí° –ü—Ä–∏–º–µ—Ä: "–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É"'
    )

    keyboard = InlineKeyboardBuilder()
    keyboard.button(text='‚ùå –û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞', callback_data='create_order')
    keyboard.adjust(1)

    kwargs = {
        'text': message_text,
        'parse_mode': 'Markdown',
        'reply_markup': keyboard.as_markup(),
    }

    await respondEvent(
        call, 
        text=message_text, 
        parse_mode="Markdown", 
        reply_markup=keyboard.as_markup()
    )

    await state.set_state(Order.topic)


@router.callback_query(F.data == 'select_video_style')
@router.message(Order.topic)
@exceptions_catcher()
async def select_video_style(event: Message | CallbackQuery, state: FSMContext) -> None:
    order_data = await state.get_data()

    # previous step: Save topic
    if isinstance(event, Message):
        topic = event.text.lower()
        await state.update_data(topic=topic)
    elif isinstance(event, CallbackQuery):
        topic = order_data['topic']

    order_data = await state.get_data()
    order_structure = makeOrderStructure(order_data)

    message_text = (
        '*üé• –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞*\n\n'
        f'{order_structure}\n\n'
        'üë®‚Äçüé® –£–∫–∞–∂–∏—Ç–µ —Å—Ç–∏–ª—å –≤–∏–¥–µ–æ.\n\n'
        'üí° –ü—Ä–∏–º–µ—Ä: "–î–µ–ª–æ–≤–æ–π, —Ç–æ–Ω –ø–æ–≤–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è ‚Äî —Å–ø–æ–∫–æ–π–Ω—ã–π"'
    )

    keyboard = InlineKeyboardBuilder()
    keyboard.button(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='select_video_topic')
    keyboard.button(text='‚ùå –û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞', callback_data='create_order')
    keyboard.adjust(2)

    await respondEvent(
        event, 
        text=message_text, 
        parse_mode="Markdown", 
        reply_markup=keyboard.as_markup()
    )

    await state.set_state(Order.style)


@router.callback_query(F.data.startswith('select_video_count'))
@router.message(Order.style)
@exceptions_catcher()
async def select_video_count(event: Message | CallbackQuery, state: FSMContext) -> None:
    order_data = await state.get_data()
    count = 1

    # previous step: Save style
    if isinstance(event, Message):
        style = event.text.lower()
        await state.update_data(style=style)
    elif isinstance(event, CallbackQuery):
        style = order_data['style']
        if '-' in event.data:
            count = int(event.data.split('-')[1])

    # Save count and price
    await state.update_data(count=count)

    price = count * settings.video_cost
    await state.update_data(price=price)

    order_data = await state.get_data()
    order_structure = makeOrderStructure(order_data)

    message_text = (
        '*üé• –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞*\n\n'
        f'{order_structure}\n\n'
        'üìº –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ.'
    )

    keyboard = InlineKeyboardBuilder()
    
    if count > 1:
        keyboard.button(text='‚¨ÖÔ∏è', callback_data=f'select_video_count-{count-1}')
    else:
        keyboard.button(text='üö©', callback_data=f'#')

    keyboard.button(text=str(count), callback_data='#')

    if count < settings.max_order_video_count:
        keyboard.button(text='‚û°Ô∏è', callback_data=f'select_video_count-{count+1}')
    else:
        keyboard.button(text='üèÅ', callback_data=f'#')

    keyboard.button(text='‚òëÔ∏è –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—ã–±–æ—Ä', callback_data='select_video_platforms')
    keyboard.button(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='select_video_style')
    keyboard.button(text='‚ùå –û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞', callback_data='create_order')
    keyboard.adjust(3, 1, 2)

    await respondEvent(
        event, 
        text=message_text, 
        parse_mode="Markdown", 
        reply_markup=keyboard.as_markup()
    )


@router.callback_query(F.data.startswith('select_video_platforms'))
@exceptions_catcher()
async def select_video_platforms(call: CallbackQuery, state: FSMContext) -> None:
    order_data = await state.get_data()
    count = order_data['count']

    # Save platforms
    try:
        platforms = order_data['platforms']
    except KeyError:
        platforms = []
    
    if '-' in call.data:
        platform = call.data.split('-')[1]
        action = call.data.split('-')[2]
        match action:
            case 'select': platforms.append(platform)
            case 'unselect': platforms.remove(platform)

    await state.update_data(platforms=platforms)

    order_data = await state.get_data()
    order_structure = makeOrderStructure(order_data)
    
    message_text = (
        '*üé• –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞*\n\n'
        f'{order_structure}\n\n'
        'üì≤ –í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.'
    )

    keyboard = InlineKeyboardBuilder()

    for platform in settings.video_platforms:
        title = platform['title']
        short_title = platform['short_title']
        callback = f'select_video_platforms-{short_title}-select'
        if short_title in platforms:
            title = f'‚úîÔ∏è {title}'
            callback = f'select_video_platforms-{short_title}-unselect'
        keyboard.button(text=title, callback_data=callback)

    if platforms:
        keyboard.button(text='‚òëÔ∏è –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—ã–±–æ—Ä', callback_data='select_video_periodicity')
    keyboard.button(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data=f'select_video_count-{count}')
    keyboard.button(text='‚ùå –û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞', callback_data='create_order')
    keyboard.adjust(1, 1, 1, 1, 2)

    await respondEvent(
        call, 
        text=message_text, 
        parse_mode="Markdown", 
        reply_markup=keyboard.as_markup()
    )


@router.callback_query(F.data.startswith('select_video_periodicity'))
@exceptions_catcher()
async def select_video_periodicity(call: CallbackQuery, state: FSMContext) -> None:
    order_data = await state.get_data()
    count = order_data['count']
    periodicity = 1

    # Save periodicity
    if '-' in call.data:
        periodicity = int(call.data.split('-')[1])

    await state.update_data(periodicity=periodicity)

    order_data = await state.get_data()
    order_structure = makeOrderStructure(order_data)
    
    message_text = (
        '*üé• –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞*\n\n'
        f'{order_structure}\n\n'
        'üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–π –≤ –Ω–µ–¥–µ–ª—é.'
    )

    keyboard = InlineKeyboardBuilder()
    
    if periodicity > 1:
        keyboard.button(text='‚¨ÖÔ∏è', callback_data=f'select_video_periodicity-{periodicity-1}')
    else:
        keyboard.button(text='üö©', callback_data=f'#')

    keyboard.button(text=str(periodicity), callback_data='#')

    if count > periodicity < 7:
        keyboard.button(text='‚û°Ô∏è', callback_data=f'select_video_periodicity-{periodicity+1}')
    else:
        keyboard.button(text='üèÅ', callback_data=f'#')

    keyboard.button(text='‚òëÔ∏è –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—ã–±–æ—Ä', callback_data='select_video_watermark')
    keyboard.button(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data=f'select_video_platforms')
    keyboard.button(text='‚ùå –û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞', callback_data='create_order')
    keyboard.adjust(3, 1, 2)

    await respondEvent(
        call, 
        text=message_text, 
        parse_mode="Markdown", 
        reply_markup=keyboard.as_markup()
    )


@router.callback_query(F.data.startswith('select_video_watermark'))
@exceptions_catcher()
async def select_video_watermark(call: CallbackQuery, state: FSMContext) -> None:
    order_data = await state.get_data()
    periodicity = order_data['periodicity']

    order_structure = makeOrderStructure(order_data)
    
    message_text = (
        '*üé• –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞*\n\n'
        f'{order_structure}\n\n'
        'üñº –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –∫–∞—á–µ—Å—Ç–≤–µ –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞.\n\n'
        '‚ÄºÔ∏è –ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫–∏ ‚Äî —Å–∏—Å—Ç–µ–º–∞ —Å–¥–µ–ª–∞–µ—Ç —ç—Ç–æ –∑–∞ –í–∞—Å.'
    )

    keyboard = InlineKeyboardBuilder()
    keyboard.button(text='‚è© –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data='select_video_publication_method')
    keyboard.button(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data=f'select_video_periodicity-{periodicity}')
    keyboard.button(text='‚ùå –û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞', callback_data='create_order')
    keyboard.adjust(1, 2)

    await respondEvent(
        call, 
        text=message_text, 
        parse_mode="Markdown", 
        reply_markup=keyboard.as_markup()
    )

    await state.set_state(Order.watermark)


@router.callback_query(F.data.startswith('select_video_publication_method'))
@router.message(F.photo)
@router.message(Order.watermark)
@exceptions_catcher()
async def select_video_publication_method(event: Message | CallbackQuery, state: FSMContext, bot: Bot) -> None:
    watermark_path = None
    watermark_status = '–Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω'

    publication_method = None
    publication_methods = [
        {'id': 'manual', 'title': '–†—É—á–Ω–æ–π'},
        {'id': 'auto', 'title': '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π'},
        {'id': 'independent', 'title': '–°–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω—ã–π'},
    ]

    # previous step: Save watermark
    if isinstance(event, Message):
        if event.photo:
            photo = event.photo[-1]
            file_id = photo.file_id
            file = await bot.get_file(file_id)
            file_path = file.file_path
            file_name = f"{file_id}.jpg"
            watermarks_dir = Path(r"media\watermarks")
            watermarks_dir.mkdir(parents=True, exist_ok=True)
            watermark_path = rf"{watermarks_dir}\{file_name}"
            await bot.download_file(file_path, watermark_path)
            watermark_status = '–¥–æ–±–∞–≤–ª–µ–Ω'
    # Save publication method
    elif isinstance(event, CallbackQuery):
        if '-' in event.data:
            publication_method = event.data.split('-')[1]

    await state.update_data(watermark=watermark_path)
    await state.update_data(publication_method=publication_method)

    order_data = await state.get_data()
    order_structure = makeOrderStructure(order_data)
    
    message_text = (
        '*üé• –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞*\n\n'
        f'{order_structure}\n\n'
        'üì§ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤–∏–¥–µ–æ:\n'
        '‚ï≠‚û§ –†—É—á–Ω–æ–π ‚Äî –ø—É–±–ª–∏–∫–∞—Ü–∏—è —Å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –º–æ–¥–µ—Ä–∞—Ü–∏–µ–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n'
        '‚ï≠‚û§ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π ‚Äî –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è, –ø—Ä–æ–≥—Ä–∞–º–º–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è, —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ.\n'
        '‚ï≠‚û§ –°–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω—ã–π ‚Äî –í—ã –ø–æ–ª—É—á–∏—Ç–µ –≥–æ—Ç–æ–≤–æ–µ –≤–∏–¥–µ–æ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö.\n\n'
        '‚ÄºÔ∏è –ü—Ä–∏ –≤—ã–±–æ—Ä–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –º–µ—Ç–æ–¥–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏, –≤–∏–¥–µ–æ –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –±–µ–∑ –º—É–∑—ã–∫–∏ –∏–∑-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –ø–ª–∞—Ç—Ñ–æ—Ä–º.'
    )

    keyboard = InlineKeyboardBuilder()

    for method in publication_methods:
        method_id = method['id']
        method_title = method['title']
        callback_data = f'select_video_publication_method-{method_id}'
        if publication_method == method_id:
            method_title = f'‚úîÔ∏è {method_title}'
            callback_data = '#'

        keyboard.button(text=method_title, callback_data=callback_data)

    if publication_method:
        match publication_method:
            case 'manual': callback_data = 'select_video_publication_account'
            case 'auto': callback_data = 'check_order'
            case 'independent': callback_data = 'check_order'
        keyboard.button(text='‚òëÔ∏è –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—ã–±–æ—Ä', callback_data=callback_data)

    keyboard.button(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data=f'select_video_watermark')
    keyboard.button(text='‚ùå –û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞', callback_data='create_order')
    keyboard.adjust(3, 1, 2)

    await respondEvent(
        event, 
        text=message_text, 
        parse_mode="Markdown", 
        reply_markup=keyboard.as_markup()
    )


@router.callback_query(F.data.startswith('select_video_publication_account'))
@exceptions_catcher()
async def select_video_publication_account(call: CallbackQuery, state: FSMContext, bot: Bot) -> None:
    publication_account = None
    publications_accounts = [
        {'id': 'client', 'title': '–ö–ª–∏–µ–Ω—Ç—Å–∫–∏–π'},
        {'id': 'service', 'title': '–°–µ—Ä–≤–∏—Å–Ω—ã–π'},
    ]

    if '-' in call.data:
        publication_account = call.data.split('-')[1]

    await state.update_data(publication_account=publication_account)

    order_data = await state.get_data()
    publication_method = order_data['publication_method']

    order_data = await state.get_data()
    order_structure = makeOrderStructure(order_data)
    
    message_text = (
        '*üé• –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞*\n\n'
        f'{order_structure}\n\n'
        'üì∫ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞ —á–µ–π –∞–∫–∫–∞—É–Ω—Ç –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤–∏–¥–µ–æ:\n'
        '‚ï≠‚û§ –ö–ª–∏–µ–Ω—Ç—Å–∫–∏–π ‚Äî –ø—É–±–ª–∏–∫–∞—Ü–∏—è –≤–∏–¥–µ–æ –Ω–∞ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç.\n'
        '‚ï≠‚û§ –°–µ—Ä–≤–∏—Å–Ω—ã–π ‚Äî –ø—É–±–ª–∏–∫–∞—Ü–∏—è –≤–∏–¥–µ–æ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç —Å–µ—Ä–≤–∏—Å–∞.\n\n'
        '‚ÄºÔ∏è –ü—Ä–∏ –≤—ã–±–æ—Ä–µ –≤–∞—Ä–∏–∞–Ω—Ç–∞: "–ö–ª–∏–µ–Ω—Ç—Å–∫–∏–π" —Å –í–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è API-–∫–ª—é—á–µ–π –∏–ª–∏ –ª–æ–≥–∏–Ω–∞/–ø–∞—Ä–æ–ª—è –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞.'
    )

    keyboard = InlineKeyboardBuilder()

    for account in publications_accounts:
        account_id = account['id']
        account_title = account['title']
        callback_data = f'select_video_publication_account-{account_id}'
        if publication_account == account_id:
            account_title = f'‚úîÔ∏è {account_title}'
            callback_data = '#'
        keyboard.button(text=account_title, callback_data=callback_data)

    if publication_account:
        keyboard.button(text='‚òëÔ∏è –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—ã–±–æ—Ä', callback_data='check_order')

    keyboard.button(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data=f'select_video_publication_method-{publication_method}')
    keyboard.button(text='‚ùå –û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞', callback_data='create_order')
    keyboard.adjust(2, 1, 2)

    await respondEvent(
        call, 
        text=message_text, 
        parse_mode="Markdown", 
        reply_markup=keyboard.as_markup()
    )
    

@router.callback_query(F.data == 'check_order')
@exceptions_catcher()
async def check_order(event: Message | CallbackQuery, state: FSMContext, bot: Bot) -> None:
    order_data = await state.get_data()
    try:
        publication_account = order_data['publication_account']
        back_callback = f'select_video_publication_account-{publication_account}'
    except KeyError:
        publication_method = order_data['publication_method']
        back_callback = f'select_video_publication_method-{publication_method}'

    order_data = await state.get_data()
    order_structure = makeOrderStructure(order_data)
    
    message_text = (
        '*üé• –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞*\n\n'
        f'{order_structure}\n\n'
        '‚úÖ –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. *–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤* –∏ –ø–æ–ª—É—á–∏—Ç–µ —Å—á—ë—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É.'
    )

    keyboard = InlineKeyboardBuilder()
    keyboard.button(text='üßæ –ü–æ–ª—É—á–∏—Ç—å —Å—á—ë—Ç', callback_data=f'get_order_invoice')
    keyboard.button(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data=back_callback)
    keyboard.button(text='‚ùå –û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞', callback_data='create_order')
    keyboard.adjust(1, 2)

    await respondEvent(
        event, 
        text=message_text, 
        parse_mode="Markdown", 
        reply_markup=keyboard.as_markup()
    )


@router.callback_query(F.data.startswith('get_order_invoice'))
@exceptions_catcher()
async def get_order_invoice(call: CallbackQuery, state: FSMContext, bot: Bot) -> None:
    chat_id = call.message.chat.id
    user_id = call.from_user.id

    # Remove previous bot message
    bot_message_id = call.message.message_id
    await bot.delete_message(chat_id=chat_id, message_id=bot_message_id)

    order_data = await state.get_data()
    price = order_data['price']

    order_structure = makeOrderStructure(order_data)
    
    # Save invoice data in cache
    try:
        invoice_id = f'invoice-{uuid.uuid4()}'
        invoice_data = json.dumps({
            'chat_id': chat_id,
            'user_id': user_id,
            'order_data': order_data,
        })  
        
        setCacheValue(
            key=invoice_id,
            value=invoice_data,
            expire=60*30, # 30 mins
        )
    except Exception as e:
        addLog(
            level='ERROR',
            text=f'[Error during invoice data saving in cache]: {e}\n\nTraceback: {traceback.format_exc()}'
        )

    # Send invoice to user
    description_text = (
        f'{order_structure}\n\n'
        '–û–ø–ª–∞—Ç–∏—Ç–µ —Å—á—ë—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 30 –º–∏–Ω—É—Ç'
    )

    try:
        invoice_message = await bot.send_invoice(
            chat_id=chat_id,
            title=f'–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞',
            description=description_text,
            payload=invoice_id,
            currency='XTR',
            prices=[{
                'label': '–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞',
                'amount': price,
            }],
            protect_content=True,
        )

        setCacheValue(
            key=f'invoice_message-{invoice_id}',
            value=invoice_message.message_id,
            expire=60*30, # 30 mins
        )

        await state.clear()
    except Exception as e:
        addLog(
            level='ERROR',
            text=f'[Error during invoice sending]: {e}\n\nTraceback: {traceback.format_exc()}'
        )


@router.pre_checkout_query()
async def order_prechekout_handler(pre_checkout_query: PreCheckoutQuery, bot: Bot) -> None:
    "Payment pre-checkhout handler."

    try:
        invoice_id = pre_checkout_query.invoice_payload
        invoice_data = getCacheValue(key=invoice_id)

        if invoice_data:
            await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)
        else:
            await bot.answer_pre_checkout_query(
                pre_checkout_query.id, 
                ok=False, 
                error_message='–í—Ä–µ–º—è –æ–ø–ª–∞—Ç—ã —Å—á—ë—Ç–∞ –∏—Å—Ç–µ–∫–ª–æ.'
            )
    except Exception as e:
        addLog(
            level='ERROR',
            text=f'[Error during payment preprocessing]: {e}\n\nTraceback: {traceback.format_exc()}'
        )


@router.message(F.content_type == ContentType.SUCCESSFUL_PAYMENT)
async def order_successful_payment_handler(message: Message, bot: Bot) -> None:
    "Successful payment handler."

    user_id = message.from_user.id

    try:
        invoice_id = message.successful_payment.invoice_payload
        invoice_data = json.loads(getCacheValue(key=invoice_id))

        # Remove the bot invoce message
        invoice_message_id = getCacheValue(f'invoice_message-{invoice_id}')
        await bot.delete_message(chat_id=invoice_data['chat_id'], message_id=invoice_message_id)

        # Sending a message about a successful payment
        order_data = invoice_data['order_data']
        order_structure = makeOrderStructure(order_data)
    
        message_text = (
            '*‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω, —Å–æ—Å—Ç–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–π.*\n\n'
            f'{order_structure}\n\n'
            f'üìÖ –ü–ª–∞—Ç—ë–∂ –ø—Ä–æ–≤–µ–¥—ë–Ω: *{datetime.datetime.now()}*'
        )

        await message.answer(
            text=message_text,
            parse_mode='Markdown',
        )

        # Process order
        processOrder(user_id, order_data)

        if settings.dev_mode:
            refund_payment = True
        else:
            refund_payment = False

    except Exception as e:
        refund_payment = True

        addLog(
            level='CRITICAL',
            text=f'[Error when processing an already paid invoice]: {e}\n\nTraceback: {traceback.format_exc()}'
        )

    if refund_payment:
        await bot.refund_star_payment(
            user_id=message.from_user.id,
            telegram_payment_charge_id=message.successful_payment.telegram_payment_charge_id,
        )
